test
library(data.table)
library(stringi)
test <- fread(text = "/Users/mbrown/OneDrive - University of Edinburgh/web_mining/Askew_Galls/2013AskewZootaxa_KM_290120.txt", sep = "\n", header = FALSE)
# I think got to create a factor determining whether it is a gall wasp or not.
# this is the genus
test[, V2 := grepl(pattern = "^[[:upper:]]{1}[[:lower:]]* [[:upper:]]{1}[[:lower:]]*", V1)]
# there are 14 genera
table(test$V2)
# remove genera
test <- test[!test$V2,][,.(V1)]
# match rows on a regex for species. Upper, lower, space, lower, upper (or parenthesis and capital)
vec <- grep(pattern = "^[[:upper:]]{1}[[:lower:]]* [[:lower:]]* [[:upper:]]{1}|^[[:upper:]]{1}[[:lower:]]* [[:lower:]]* \\([[:upper:]]", x = test$V1)
length(vec) # 114 gall wasp species?
# split the list on gall wasp species
lis <- list()
for(i in 1:113){
j <- i+1
lis[[i]] <- test[vec[i:j][1]:(vec[i:j][2]-1)]
}
lis[113]
# what are all the countries?
countries <- c("AD, AT, AZ, BE, BG, CH, CZ, DE, DK, DZ, ES, FI, FR, GB, GR, HR, HU, IE, IS, IT, JO, LB, MA, MD, NL, PL, PT, RO, RS, RU, SE, SI, SK, TN, TR, UA, YU")
countries <- gsub(", ", "|", countries)
countries <- stringi::stri_replace_all_regex(str = countries, pattern = "\\|", replacement = ").{7}|(?=")
countries <- paste0("(?=", countries, ").{7}")
countries
m<-lapply(lis, function(x){
# x refers to the data table
# this creates the gall species and parasitoids along with metadata
y <- dim(x)[1]
Gall_species <- x[1]
# Gall_species actually turns to Gall_species.V1 (..?)
x <- x[, .(Gall_sp = Gall_species, Parasitoids = V1)]
x <- x[-1]
# so change names back
setnames(x = x, old = "Gall_sp.V1", "Gall_sp")
# next we want to split on forward slashes and take the first element
x[, Parasitoid := gsub(" /.*", "", Parasitoids)]
# create new column for number if recorded, then remove next bracket, then turn to numeric
x[, Total_number := gsub(".* \\(", "", Parasitoid)][, Total_number := gsub("\\)", "", Total_number)][, Total_number := as.numeric(Total_number)]
# clean up the parasitoid column
x[, Parasitoid := gsub(" \\(.*", "", Parasitoid)]
# get status/generation of gall wasp out
x[, Status := gsub(".*\\(", "", Gall_sp)][, Status := gsub("\\)", "", Status)]
# lastly, get the countries out, and numbers separately
x[, Per_country := stri_extract_all(str = Parasitoids, regex = countries)]
# remove authority and after...
x[, Gall_sp := gsub(" [[:upper:]].*| \\(.*", "", Gall_sp)]
})
# Per_country is a list of vectors and we want only country + number in a list
# to clean use lapply and regex
# list 113 has a duplicate column for some reason.
m[[113]] <- m[[113]][, -"Gall_sp.Gall_sp"]
m2 <- rbindlist(m)
n <- lapply(m2$Per_country, function(x) {
# sorted if country + number
y <- gsub(" \\([a-zA-z]*", " ", x)
y <- gsub("\\)", "", y)
# now remove guff if there was no number (Ã¼ + /)
z <- gsub(" /.*", "", y)
z <- gsub(" Q\\..*", "", z)
z <- gsub(" Ã¼.*", "", z)
# remove asterisks and space at end of string
z <- gsub("\\*", "", z)
z <- gsub(" $", "", z)
z
})
# replace per country with n
m2[, Per_country := sapply(n, function(x) paste(x, collapse = ","))]
# rearrange and clean
m3 <- m2[, .(Gall_sp, Status, Parasitoid, Total_number, Per_country)]
m3
m3[,.(strsplit(Per_country, ","))]
str(m3[,.(strsplit(Per_country, ","))])
m3[, Per_country := strsplit(Per_country, ",")]
m3[, x := unlist(Per_country)]
dcast(m3, formula = ~ Per_country)
m3
dcast(m3, formula = Gall_sp+Status+Parasitoid+Total_number~ Per_country)
m3[, .(Gall_sp, unlist(Per_country))]
m3[, .(Gall_sp, unlist(Per_country))][1:15]
m3[, .(Gall_sp,Status,Parasitoid,Total_number,unlist(Per_country))]
m3[, .(Gall_sp,Status,Parasitoid,Total_number,unlist(Per_country))][1:100]
m3[, Per_country := strsplit(Per_country, ",")]
m3
m3[, .(Gall_sp,Status,Parasitoid,Total_number,unlist(Per_country))][1:100]
m3[1:100]
m3[, .(Gall_sp,Status,Parasitoid,Total_number,unlist(Per_country))][1:100]
m3
m3[, ID := 1:nrow(m3)]
m3
c(m3$Per_country, m3$ID)
c(m3$Per_country, m3$ID)[1]
c(m3$Per_country, m3$ID)[2]
lapply(m3$Per_country, function(x) c(m3$ID, m3$Per_country))
lapply(m3$Per_country, function(x) c(m3$ID, x))
lapply(m3$Per_country, function(x) c(m3$ID[x], x))
m3
m3[,.(ID, unlist(Per_country))]
m3[,.(ID, unlist(Per_country))][1:50]
m3
m3[,.(unlist(Per_country)), by = .(ID)]
m3[,.(unlist(Per_country)), by = .(ID)][1:50]
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][1:50]
m3[,.(Per_country = unlist(Per_country)), by = rowid(m3)][1:50]
rowid(m3)
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][1:50]
# group by unique ID                                  then! merge back with data
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][m3[,-.(Per_country)], on.(ID)]
# group by unique ID                                  then! merge back with data
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][m3[,.(-Per_country)], on.(ID)]
m3[,.(-Per_country)]
m3[,-Per_country]
m3[,-"Per_country"]
# group by unique ID                                  then! merge back with data
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][m3[,-"Per_country"], on.(ID)]
# group by unique ID                                  then! merge back with data
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][m3[,-"Per_country"], on=.(ID)]
# group by unique ID                                  then! merge back with data
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][m3[,-c("Per_country", "Total_number")], on=.(ID)]
# group by unique ID                                  then! merge back with data
m3[,.(Per_country = unlist(Per_country)), by = .(ID)][m3[,-c("Per_country", "Total_number")], on=.(ID)][1:30]
# group by unique ID                                  then! merge back with data
m4 <- m3[,.(Per_country = unlist(Per_country)), by = .(ID)][m3[,-c("Per_country", "Total_number")], on=.(ID)]
stringi::stri_extract_first_regex(str = m4$Per_country, pattern = "[[:digit:]]")
stringi::stri_extract_first_regex(str = m4$Per_country, pattern = "[[:digit:]]*")
stringi::stri_extract_first_regex(str = m4$Per_country, pattern = "[[:digit:]]+")
m4[45]
m4[494]
# create the Total Number again
m4[, Number := stringi::stri_extract_first_regex(str = m4$Per_country, pattern = "[[:digit:]]+")]
m4
# fix Per_country
m4[, Per_country := gsub(" .*", "", Per_country)]
m4
countries
Country <- "Andorra, Austria, Azerbaijan, Belgium, Bulgaria, Switzerland, Czech Republic, Germany, Denmark, Algeria, Spain, Finland, France, United Kingdom, Greece, Croatia, Hungary, Ireland,Israel, Italy, Jordan, Lebanon, Morocco, Moldova, Netherlands, Poland, Portugal, Romania, Serbia, Russian Federation, Sweden, Slovenia, Slovakia, Tunisia, Turkey, Ukraine, Yugoslavia"
Country
sapply(Country, function(x) strsplit(x, ","))
sapply(Country, function(x) strsplit(x, " ,"))
sapply(Country, function(x) strsplit(x, ","))
country_names <- data.table(Per_country = c("AD, AT, AZ, BE, BG, CH, CZ, DE, DK, DZ, ES, FI, FR, GB, GR, HR, HU, IE, IS, IT, JO, LB, MA, MD, NL, PL, PT, RO, RS, RU, SE, SI, SK, TN, TR, UA, YU"),
Country = sapply(Country, function(x) strsplit(x, ",")))
country_names
country_names <- data.table(Per_country = c("AD, AT, AZ, BE, BG, CH, CZ, DE, DK, DZ, ES, FI, FR, GB, GR, HR, HU, IE, IS, IT, JO, LB, MA, MD, NL, PL, PT, RO, RS, RU, SE, SI, SK, TN, TR, UA, YU"),
Country = sapply(Country, function(x) strsplit(x, ","))[[1]])
country_names
apply(Country, function(x) strsplit(x, ","))
sapply(Country, function(x) strsplit(x, ","))
sapply(Country, function(x) strsplit(x, ","))[[1]]
Per_country <- c("AD, AT, AZ, BE, BG, CH, CZ, DE, DK, DZ, ES, FI, FR, GB, GR, HR, HU, IE, IS, IT, JO, LB, MA, MD, NL, PL, PT, RO, RS, RU, SE, SI, SK, TN, TR, UA, YU")
country_names <- data.table(Per_country = sapply(Per_country, function(x) strsplit(x, ","))[[1]],
Country = sapply(Country, function(x) strsplit(x, ","))[[1]])
country_names
# final fix
m4[country_names, on = .(Per_country)]
# final fix
country_names[m4, on = .(Per_country)]
country_names
country_names
# final fix
country_names[m4, on = .(Per_country)]
str(country_names)
str(m4)
country_names[m4, on = .(Per_country)]
country_names[m4, on = .(Per_country)][1:100]
country_names[m4[Per_country], on = .(Per_country)]
m4[Per_country][country_names, on = .(Per_country)]
m4[,.(Per_country)][country_names, on = .(Per_country)]
country_names[m4[,.(Per_country)], on = .(Per_country)]
m4[,.(Per_country)]
country_names[m4[,.(Per_country)], on = "Per_country"]
country_names
str(country_names)
merge(x = country_names, y = m4, by = "Per_country")
merge(x = m4, y = country_names, by = "Per_country")
merge(x = m4, y = country_names, by.x = "Per_country")
merge(x = m4, y = country_names, by.y = "Per_country")
merge(x = m4, y = country_names, by = "Per_country", all = TRUE)
m4
merge(x = m4, y = country_names, by = "Per_country", all.x = TRUE)
m4[5736]
m4[ID == 2608]
# final fix
m4[country_names, on = .(Per_country)]
# final fix
country_names[m4, on = .(Per_country)]
# final fix
country_names[m4, on = .(Per_country)]$Country
country_names
country_names[,Per_country := gsub(" ", "", Per_country)]
# final fix
country_names[m4, on = .(Per_country)]$Country
country_names[,Country := gsub(" ", "", Country)]
# final fix
country_names[m4, on = .(Per_country)]$Country
country_names <- data.table(Per_country = sapply(Per_country, function(x) strsplit(x, ","))[[1]],
Country = sapply(Country, function(x) strsplit(x, ","))[[1]])
country_names[,Country := gsub("^ ", "", Country)]
country_names[,Per_country := gsub(" ", "", Per_country)]
# final fix
country_names[m4, on = .(Per_country)]$Country
# final fix
country_names[m4, on = .(Per_country)]
# final fix
m5 <- country_names[m4, on = .(Per_country)]
m5[,.(Per_country,Country,Gall_sp,Status,Parasitoid,Number)]
fwrite(m5[,.(Per_country,Country,Gall_sp,Status,Parasitoid,Number)], "/Users/mbrown/OneDrive - University of Edinburgh/web_mining/Askew_Galls/MB_KM_galls280220.csv")
